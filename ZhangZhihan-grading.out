
CS:APP Cache Lab: Grading Sheet for ZhangZhihan-handin.tar

Part 1: Compiling test framework

gcc -g -Wall -Werror -std=c99 -m64 -o csim csim.c cachelab.c -lm 
gcc -g -Wall -Werror -std=c99 -m64 -o csim-ref csim-ref.c cachelab.c -lm
gcc -g -Wall -Werror -std=c99 -m64 -o test-csim test-csim.c 
gcc -g -Wall -Werror -std=c99 -m64 -O0 -c trans.c
gcc -g -Wall -Werror -std=c99 -m64 -o test-trans test-trans.c cachelab.c trans.o 
gcc -g -Wall -Werror -std=c99 -m64 -O0 -o tracegen tracegen.c trans.o cachelab.c


Part 2: Running the driver

Part A: Testing cache simulator
Running ./test-csim
                        Your simulator     Reference simulator
Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts
     3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace
     3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace
     3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace
     3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace
     3 (3,2,3)     209      29      13     209      29      13  traces/trans.trace
     6 (5,8,6)  140891    5209    4953  140891    5209    4953  traces/sort.trace
     6 (1,4,3)   38429  107671  107663   38429  107671  107663  traces/sort.trace
     6 (6,3,5)  280805    6159    5967  280805    6159    5967  traces/long.trace
     6 (5,4,4)  266475   20489   20361  266475   20489   20361  traces/long.trace
     6 (4,2,5)  142850   28653   28621  142850   28653   28621  traces/sort4k.trace
    45


Part B: Testing transpose function
Running ./test-trans -M 32 -N 32
Running ./test-trans -M 64 -N 64
Running ./test-trans -M 61 -N 67

Cache Lab summary:
                        Points   Max pts      Misses
Csim correctness          45.0        39
Trans perf 32x32           8.0         8         287
Trans perf 64x64           4.0         4        1171
Trans perf 61x67           8.0         8        1928
          Total points    65.0        59
Style:    4 / 5
-0.5	some variable/function names are not very descriptive
-0.5	some code lines longer than 80 chars

AUTORESULT_STRING=65.0:287:1171:1928


Part 3: Grade


Score : 65.0 / 53
Stype :       / 

Part 4: Handin files for ZhangZhihan-handin.tar


*** csim.c ***
#include "cachelab.h"
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <getopt.h>
#include <stdlib.h>

// Author: Zhihan Zhang
// WUSTL ID: 478594

enum {
    TYPE_MODIFY,
    TYPE_LOAD,
    TYPE_SAVE
};

enum {
    HIT,
    MISS,
    EVICTION
};

typedef struct {
    int visible;
    int set_num;
    int entry;
} cache_size;

typedef struct {
    unsigned long int valid;
    unsigned long int tag;
} cache_line;

typedef struct {
    char op;
    unsigned long int addr;
    unsigned long int index;
    unsigned long int tag;
    unsigned int mem_size;
} operation;

typedef struct {
    int hits;
    int misses;
    int evictions;
} summary;

void Caching(cache_line *cache, operation an_op, cache_size c_size, summary *my_summary) {

    int index;
    int type;
    int result;
    unsigned long int temp_rag;

    // get type
    switch (an_op.op) {
        case 'M':
            type = TYPE_MODIFY;
            break;
        case 'L':
            type = TYPE_LOAD;
            break;
        case 'S':
            type = TYPE_SAVE;
            break;
    }
    cache_line *pcache = cache + an_op.index * c_size.entry;

    // get result type
    result = EVICTION;
    for (index = 0; index < c_size.entry; index++) {
        if ((pcache + index)->valid == 0) {
            result = MISS;
            break;
        }
        if ((pcache + index)->tag == an_op.tag) {
            result = HIT;
            break;
        }
    }

    // LRU policy
    switch (result) {
        // if HIT, just refrash the time
        case HIT:
            temp_rag = (pcache + index)->tag;
            for ( ; index < c_size.entry - 1 && (pcache + index + 1)->valid == 1; index++) {
                (pcache + index)->tag = (pcache + index + 1)->tag;
            }
            (pcache + index)->tag = temp_rag;
            my_summary->hits++;
            break;
        // if MISS, add it to the cache
        case MISS:
            my_summary->misses++;
            (pcache + index)->valid = 1;
            (pcache + index)->tag = an_op.tag;
            break;
        // if EVICTION, delete the line who have minimum time and add it to the cache
        case EVICTION:
            my_summary->misses++;
            my_summary->evictions++;
            for (index = 0; index < c_size.entry - 1; index++) {
                (pcache + index)->tag = (pcache + index + 1)->tag;
            }
            (pcache + index)->tag = an_op.tag;
            break;
    }

    // the write in type modify is sure to hit
    if (type == TYPE_MODIFY)
        my_summary->hits++;
        
    // print type ( Only visible = 1 )
    if (c_size.visible == 1) {
        switch (type) {
            case TYPE_MODIFY:
                printf("M ");
                break;
            case TYPE_LOAD:
                printf("L ");
                break;
            case TYPE_SAVE:
                printf("S ");
                break;
        }
        printf("%lx,%d ", an_op.addr, an_op.mem_size);
        switch (result) {
            case HIT:
                printf("hit");
                break;
            case MISS:
                printf("miss");
                break;
            case EVICTION:
                printf("miss eviction");
                break;
        }
        if (type == TYPE_MODIFY)
            printf(" hit");
        printf("\n");
    }
}


void print_help_info(void) {
    // Print the help inforation of this program
    printf("Usage: ./csim [-hv] -s <num> -E <num> -b <num> -t <file>\n");
    printf("Options:\n");
    printf("  -h         Print this help message.\n");
    printf("  -v         Optional verbose flag.\n");
    printf("  -s <num>   Number of set index bits.\n");
    printf("  -E <num>   Number of lines per set.\n");
    printf("  -b <num>   Number of block offset bits.\n");
    printf("  -t <file>  Trace file.\n");
    printf("\n");
    printf("Examples:\n");
    printf("  linux>  ./csim -s 4 -E 1 -b 4 -t traces/yi.trace\n");
    printf("  linux>  ./csim -v -s 8 -E 2 -b 4 -t traces/yi.trace\n");
}

int main(int argc, char **argv) {

    // get options
    char opt;
    int help = 0, visible = 0, set_power = 0, set_num = 0, entry = 0, block_power = 0, trace = 0;
    char *filepath;
    while((opt = getopt(argc, argv, "hvs:E:b:t:")) != -1) {
        switch (opt) {
            case 'h':
                help = 1;
                break;
            case 'v':
                visible = 1;
                break;
            case 's':
                set_power = atoi(optarg);
                set_num = 1 << set_power;
                break;
            case 'E':
                entry = atoi(optarg);
                break;
            case 'b':
                block_power = atoi(optarg);
                break;
            case 't':
                trace = 1;
                filepath = optarg;
                break;
            default:
                help = 1;
                break;
        }
    }

    // Print help info
    if (help == 1) {
        print_help_info();
        exit(0);
    }
    if (set_power == 0 || entry == 0 || block_power == 0 || trace == 0) {
        printf("Arguments Error!\n\n");
        print_help_info();
        exit(1);
    }

    // Build cache
    summary my_summary;
    cache_size c_size;
    int index;
    my_summary.hits = my_summary.misses = my_summary.evictions = 0;
    c_size.visible = visible, c_size.set_num = set_num, c_size.entry = entry;
    cache_line *cache = (cache_line *)malloc(sizeof(cache_line) * set_num * entry);
    if (cache == NULL) {
        printf("Memory Error!\n");
        exit(1);
    }
    for (index = 0; index < set_num * entry; index++) {
        (cache + index)->valid = 0;
        (cache + index)->tag = 0xffffffff;
    }

    // Read file
    FILE *trace_file = fopen(filepath, "r");
    operation an_op;
    char line[80];
    char *pline = NULL;
    while (fgets(line, 80, trace_file) != NULL) {
        pline = line;
        if (*pline++ == 'I')
            continue;
        sscanf(pline, "%c %lx,%u", &an_op.op, &an_op.addr, &an_op.mem_size);
        an_op.index = (an_op.addr >> block_power) & ~(~0 << set_power);
        an_op.tag = an_op.addr >> (block_power + set_power);
        Caching(cache, an_op, c_size, &my_summary);
    }
    free(cache);

    // Print answer
    printSummary(my_summary.hits, my_summary.misses, my_summary.evictions);
    return 0;
}
*** trans.c ***
/* 
 * trans.c - Matrix transpose B = A^T
 *
 * Each transpose function must have a prototype of the form:
 * void trans(int M, int N, int A[N][M], int B[M][N]);
 *
 * A transpose function is evaluated by counting the number of misses
 * on a 1KB direct mapped cache with a block size of 32 bytes.
 */ 
#include <stdio.h>
#include "cachelab.h"

int is_transpose(int M, int N, int A[N][M], int B[M][N]);

/* 
 * transpose_submit - This is the solution transpose function that you
 *     will be graded on for Part B of the assignment. Do not change
 *     the description string "Transpose submission", as the driver
 *     searches for that string to identify the transpose function to
 *     be graded. 
 */
char transpose_submit_desc[] = "Transpose submission";
void transpose_submit(int M, int N, int A[N][M], int B[M][N])
{
//32*32
//4*64*(1/8 + 1/4) + 12*64*2*(1/8) = 288
//Min "misses" is about 288 based on my calculation
    int a1,a2,a3,a4,a5,a6,a7,a8;
    int i,j,k,l,h;

    if(M == 32 && N == 32){
        for(i = 0; i < 4; i++){
            for(j = 0; j < 4; j++){
                for(k = i*8; k < (i+1)*8; k++){
                    h=j*8;
                    a1=A[k][h];
                    a2=A[k][h+1];
                    a3=A[k][h+2];
                    a4=A[k][h+3];
                    a5=A[k][h+4];
                    a6=A[k][h+5];
                    a7=A[k][h+6];
                    a8=A[k][h+7];

                    B[h][k]=a1;
                    B[h+1][k]=a2;
                    B[h+2][k]=a3;
                    B[h+3][k]=a4;
                    B[h+4][k]=a5;
                    B[h+5][k]=a6;
                    B[h+6][k]=a7;
                    B[h+7][k]=a8;
                }
            }
        }
    }
//64*64
//Min "misses" is about 1180 based on my calculation
    else if(M == 64 && N == 64) {
        for (i = 0; i < 64; i += 8) {
            for (j = 0; j < 64; j += 8) {
                for (k = i; k < i + 4; k++) {
                    a1 = A[k][j];
                    a2 = A[k][j + 1];
                    a3 = A[k][j + 2];
                    a4 = A[k][j + 3];
                    a5 = A[k][j + 4];
                    a6 = A[k][j + 5];
                    a7 = A[k][j + 6];
                    a8 = A[k][j + 7];

                    B[j][k] = a1;
                    B[j + 1][k] = a2;
                    B[j + 2][k] = a3;
                    B[j + 3][k] = a4;
                    B[j][k + 4] = a5;
                    B[j + 1][k + 4] = a6;
                    B[j + 2][k + 4] = a7;
                    B[j + 3][k + 4] = a8;
            }
            for (l = j + 4; l < j + 8; l++) {

                a5 = A[i + 4][l - 4];
                a6 = A[i + 5][l - 4];
                a7 = A[i + 6][l - 4];
                a8 = A[i + 7][l - 4];

                a1 = B[l - 4][i + 4];
                a2 = B[l - 4][i + 5];
                a3 = B[l - 4][i + 6];
                a4 = B[l - 4][i + 7];

                B[l - 4][i + 4] = a5;
                B[l - 4][i + 5] = a6;
                B[l - 4][i + 6] = a7;
                B[l - 4][i + 7] = a8;

                B[l][i] = a1;
                B[l][i + 1] = a2;
                B[l][i + 2] = a3;
                B[l][i + 3] = a4;

                B[l][i + 4] = A[i + 4][l];
                B[l][i + 5] = A[i + 5][l];
                B[l][i + 6] = A[i + 6][l];
                B[l][i + 7] = A[i + 7][l];
            }
        }
    }
    }
//61*67
//Min "misses" is about 1900 based on my calculation
//I ran test with different block size (4 - 30), and I found that "misses" is min when each block has size 23. 
else if (M == 61 && N == 67){
    for (i = 0; i < N; i += 23) {
        for (j = 0;  j < M; j += 23) {
            for (k = i; k < i + 23 && k < N; k++) {
                for (l = j; l < j + 23 && l < M; l++) {
                    h = A[k][l];
                    B[l][k] = h;
                }
            }
        }
    }
}
}
/* 
 * You can define additional transpose functions below. We've defined
 * a simple one below to help you get started. 
 */ 

/* 
 * trans - A simple baseline transpose function, not optimized for the cache.
 */
char trans_desc[] = "Simple row-wise scan transpose";
void trans(int M, int N, int A[N][M], int B[M][N])
{
    int i, j, tmp;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            tmp = A[i][j];
            B[j][i] = tmp;
        }
    }    

}

/*
 * registerFunctions - This function registers your transpose
 *     functions with the driver.  At runtime, the driver will
 *     evaluate each of the registered functions and summarize their
 *     performance. This is a handy way to experiment with different
 *     transpose strategies.
 */
void registerFunctions()
{
    /* Register your solution function */
    registerTransFunction(transpose_submit, transpose_submit_desc); 

    /* Register any additional transpose functions */
    registerTransFunction(trans, trans_desc); 

}

/* 
 * is_transpose - This helper function checks if B is the transpose of
 *     A. You can check the correctness of your transpose by calling
 *     it before returning from the transpose function.
 */
int is_transpose(int M, int N, int A[N][M], int B[M][N])
{
    int i, j;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; ++j) {
            if (A[i][j] != B[j][i]) {
                return 0;
            }
        }
    }
    return 1;
}

